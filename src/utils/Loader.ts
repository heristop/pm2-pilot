import chalk from 'chalk';

export interface LoaderOptions {
  message?: string;
  context?: 'analysis' | 'query' | 'action' | 'general';
  timeout?: number;
}

interface LoaderState {
  interval?: NodeJS.Timeout;
  frameIndex: number;
  isActive: boolean;
  startTime: number;
  currentMessage: string;
}

export class Loader {
  // Global message tracking across all loader instances
  private static lastGlobalMessageIndex: number = -1;
  
  private state: LoaderState = {
    frameIndex: 0,
    isActive: false,
    startTime: 0,
    currentMessage: ''
  };

  private readonly spinnerFrames = ['‚†ã', '‚†ô', '‚†π', '‚†∏', '‚†º', '‚†¥', '‚†¶', '‚†ß', '‚†á', '‚†è'];
  
  private readonly loadingMessages = {
    analysis: [
      'üéÆ Parsing your quest objective...',
      '‚öîÔ∏è Analyzing the process battlefield...',
      'üéØ Identifying target processes like a sniper...',
      'üõ°Ô∏è Checking process defenses and health bars...',
      'üìä Monitoring system vitals in real-time...',
      'üîç Scanning PM2 ecosystem for anomalies...',
      'üé≤ Rolling for command interpretation...',
      'üïπÔ∏è Loading process intelligence data...'
    ],
    query: [
      'üèÜ Consulting the PM2 process oracle...',
      'üéÆ Querying the system leaderboard...',
      '‚ö° Charging up the monitoring array...',
      'üîÆ Divining PM2 secrets from the logs...',
      'üìà Calculating performance metrics XP...',
      'üé™ Juggling multiple process threads...',
      'üöÄ Launching deep system scan...',
      'üéØ Targeting optimal response patterns...'
    ],
    action: [
      '‚öîÔ∏è Engaging process combat mode...',
      'üöÄ Launching PM2 operation sequence...',
      'üéÆ Executing admin privilege commands...',
      'üõ†Ô∏è Wielding process management tools...',
      'üí• Deploying system changes like a boss...',
      'üéØ Targeting process instances precisely...',
      'üèÖ Leveling up your server infrastructure...',
      '‚ö° Casting process manipulation spells...'
    ],
    general: [
      'üéÆ Loading next server level...',
      '‚ö° Processing system game state...',
      'üèÖ Calculating process XP gains...',
      'üìä Updating PM2 process leaderboard...',
      'üîß Tuning performance settings...',
      'üé™ Managing the server circus act...',
      'üöÄ Booting up the monitoring dashboard...',
      'üéØ Achieving process management mastery...'
    ]
  };

  private readonly extendedLoadingMessages = [
    'üéÆ Boss fight in progress - this might take a while!',
    '‚òï Perfect time for a coffee break while the servers work...',
    'üåü The PM2 AI is being extra thorough with your processes!',
    'üé≠ Complex monitoring deserves complex analysis!',
    'üß† Neural networks grinding through process data!',
    '‚ö° System monitoring at maximum overdrive!',
    'üéØ Precision process management takes time!',
    'üöÄ Loading the ultimate PM2 experience!'
  ];

  start(options: LoaderOptions = {}): void {
    if (this.state.isActive) {
      this.stop();
    }

    const context = options.context || 'general';
    const messages = this.loadingMessages[context];
    
    // Select one message for this entire API call
    const selectedMessage = options.message || this.selectNewMessage(messages);
    
    this.state = {
      frameIndex: 0,
      isActive: true,
      startTime: Date.now(),
      currentMessage: selectedMessage
    };

    // Hide cursor
    process.stdout.write('\x1B[?25l');

    // Start spinner animation - only animate spinner, keep same message
    this.state.interval = setInterval(() => {
      this.updateDisplay(this.state.currentMessage);
      this.state.frameIndex = (this.state.frameIndex + 1) % this.spinnerFrames.length;
    }, 100);

    // Set timeout if specified
    if (options.timeout) {
      setTimeout(() => {
        if (this.state.isActive) {
          this.stop();
          console.log(chalk.yellow('\n‚è∞ Operation timed out. The AI might be having a coffee break!'));
        }
      }, options.timeout);
    }

    // Initial display with selected message
    this.updateDisplay(this.state.currentMessage);
  }

  private updateDisplay(message: string): void {
    if (!this.state.isActive) return;

    // Clear current line and move cursor to beginning
    process.stdout.write('\r\x1B[K');
    
    // Display spinner with message
    const spinner = chalk.cyan(this.spinnerFrames[this.state.frameIndex]);
    process.stdout.write(`${spinner} ${message}`);
  }

  private selectNewMessage(messages: string[]): string {
    if (messages.length === 0) return '';
    if (messages.length === 1) return messages[0];
    
    let randomIndex;
    do {
      randomIndex = Math.floor(Math.random() * messages.length);
    } while (randomIndex === Loader.lastGlobalMessageIndex && messages.length > 1);
    
    Loader.lastGlobalMessageIndex = randomIndex;
    return messages[randomIndex] ?? messages[0];
  }


  stop(): void {
    if (!this.state.isActive) return;

    this.state.isActive = false;

    // Clear interval
    if (this.state.interval) {
      clearInterval(this.state.interval);
    }

    // Clear current line and show cursor
    process.stdout.write('\r\x1B[K');
    process.stdout.write('\x1B[?25h');
  }

  success(message: string): void {
    this.stop();
    console.log(chalk.green(`‚úÖ ${message}`));
  }

  error(message: string): void {
    this.stop();
    console.log(chalk.red(`‚ùå ${message}`));
  }

  info(message: string): void {
    this.stop();
    console.log(chalk.blue(`‚ÑπÔ∏è ${message}`));
  }

  // Static convenience methods
  static async withLoader<T>(
    fn: () => Promise<T>,
    options: LoaderOptions = {}
  ): Promise<T> {
    const loader = new Loader();
    loader.start(options);

    try {
      const result = await fn();
      loader.stop();
      return result;
    } catch (error) {
      loader.stop();
      throw error;
    }
  }

  // Specific context loaders
  static async withAnalysis<T>(fn: () => Promise<T>, message?: string): Promise<T> {
    return this.withLoader(fn, {
      context: 'analysis',
      message,
      timeout: 30000 // 30 seconds for analysis
    });
  }

  static async withQuery<T>(fn: () => Promise<T>, message?: string): Promise<T> {
    return this.withLoader(fn, {
      context: 'query',
      message,
      timeout: 45000 // 45 seconds for AI queries
    });
  }

  static async withAction<T>(fn: () => Promise<T>, message?: string): Promise<T> {
    return this.withLoader(fn, {
      context: 'action',
      message,
      timeout: 20000 // 20 seconds for actions
    });
  }
}
