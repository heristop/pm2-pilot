name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: 22

jobs:
  quality:
    name: Code Quality & Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
          
      - name: Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Run build
        run: pnpm run build

      - name: Run CI Quality Pipeline
        run: pnpm run ci:quality
        
      - name: Upload coverage reports
        uses: codecov/codecov-action@v5
        if: always()
        with:
          files: ./coverage/lcov.info
          fail_ci_if_error: false
          
      - name: Upload quality reports as artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: quality-reports
          path: reports/
          retention-days: 30

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
          
      - name: Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Run security audit
        run: pnpm audit --audit-level high
        continue-on-error: true

  build-matrix:
    name: Build & Test Matrix
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        node-version: [22]
      fail-fast: false
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
          
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v5
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'pnpm'
          
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Build application
        run: pnpm run build 

      - name: Run tests
        run: pnpm run test
        
      - name: Test built application (Unix)
        if: runner.os != 'Windows'
        run: |
          chmod +x dist/bin/pm2pilot.js
          timeout 5s node dist/bin/pm2pilot.js --version || true
          
      - name: Test built application (Windows)
        if: runner.os == 'Windows'
        run: |
          node dist/bin/pm2pilot.js --version
        shell: cmd

  # publish:
  #   name: Publish Package
  #   runs-on: ubuntu-latest
  #   needs: [quality, security, build-matrix]
  #   if: github.ref == 'refs/heads/main' && github.event_name == 'push'
  #   
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4
  #       
  #     - name: Setup pnpm
  #       uses: pnpm/action-setup@v4
  #       with:
  #         version: 8
  #         
  #     - name: Setup Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: ${{ env.NODE_VERSION }}
  #         cache: 'pnpm'
  #         registry-url: 'https://registry.npmjs.org'
  #         
  #     - name: Install dependencies
  #       run: pnpm install --frozen-lockfile
  #       
  #     - name: Build package
  #       run: pnpm run build
  #       
  #     - name: Check if version changed
  #       id: version-check
  #       run: |
  #         CURRENT_VERSION=$(node -p "require('./package.json').version")
  #         PUBLISHED_VERSION=$(npm view pm2pilot version 2>/dev/null || echo "0.0.0")
  #         echo "current=$CURRENT_VERSION" >> $GITHUB_OUTPUT
  #         echo "published=$PUBLISHED_VERSION" >> $GITHUB_OUTPUT
  #         if [ "$CURRENT_VERSION" != "$PUBLISHED_VERSION" ]; then
  #           echo "changed=true" >> $GITHUB_OUTPUT
  #         else
  #           echo "changed=false" >> $GITHUB_OUTPUT
  #         fi
  #         
  #     - name: Publish to npm
  #       if: steps.version-check.outputs.changed == 'true'
  #       run: pnpm publish --no-git-checks
  #       env:
  #         NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
  #         
  #     - name: Create GitHub release
  #       if: steps.version-check.outputs.changed == 'true'
  #       uses: ncipollo/release-action@v1
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       with:
  #         tag_name: v${{ steps.version-check.outputs.current }}
  #         release_name: Release v${{ steps.version-check.outputs.current }}
  #         draft: false
  #         prerelease: false